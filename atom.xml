<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>6K</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://l19861225q.github.io/blog/"/>
  <updated>2020-01-01T07:52:03.575Z</updated>
  <id>https://l19861225q.github.io/blog/</id>
  
  <author>
    <name>6K</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019 年的总结</title>
    <link href="https://l19861225q.github.io/blog/2020/01/01/summary-of-2019/"/>
    <id>https://l19861225q.github.io/blog/2020/01/01/summary-of-2019/</id>
    <published>2020-01-01T07:30:00.000Z</published>
    <updated>2020-01-01T07:52:03.575Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉就 2020 年了，时间过的真快，对2019年的自己做一下总结</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>2019年最大的事，莫过于老后台的重构了，TypeScript、GraphQL、Gatsby 等一系列之前从未接触过的技术栈都整上来了。。。一开始还有些瑟瑟发抖，生怕消化不了。到年中的时候，这套框架已经基本稳定，填过的坑也不少。感谢团队中的各位大佬对技术栈突变的接受与理解，目前团队加上我一共有7为小伙伴，大家分工有序，在各自的业务海洋里蓬勃发展，井然有序，梯队建设的还可以。其间也有流失的几位大佬，对自己没能留住他们，抱有一定的惋惜，今后在人才培养上还要继续努力。<br>原计划是把老后台都重构完的，但是预估不足，越往后发现需求越多，就按照平台，分阶段重构。2019年算是把运营后台都迁移完毕了，剩下最难啃的直播后台留到2020年，争取全部完成。随着公司上市，我也接触了和审计相关的材料需求，了解到目前后台在流程上存在的一些问题，已经优化了几个版本，为迎接后续的每一次审计做好准备。组内技术分享的氛围挺好的，自己在这方面是弱项，随着把关者的加入，自己在这方面要多改进。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>健身的频率是越来越少了，回到家就累的不想再动，有点偷懒。头发也快保不住了，头皮几乎清晰可见，听了同学的建议，每天下午喝一袋黑芝麻糊，希望能管用。7月份的时候去了大阪和东京，行程安排的有些赶，记得那时正好要提交绩效考核，我和随行的同事在新干线上就拿出笔记本开始写，想想那个画面还挺有趣的。有很多同事也搬来我这边的小区生活，闲暇的时候约个饭，打个牌什么的，蛮开心的。<br>看了朋友的断舍离行动，把不要的东西变卖或者送人，简单生活的理念，我也陆陆续续开始，闲鱼上也是各种挂，希望早日能够沽清吧，哇咔咔。</p><h3 id="2020-心愿"><a href="#2020-心愿" class="headerlink" title="2020 心愿"></a>2020 心愿</h3><ul><li>把老后台都重构完</li><li>小组的规模再扩大一些，梯队搞好</li><li>定期的身体锻炼（感谢公司新修的健身房，采光很好哦）</li><li>争取每个节假日都能出去转一圈，见见世面</li><li>发量增长一倍（虽然比较难）</li></ul><p>2020 Fighting～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不知不觉就 2020 年了，时间过的真快，对2019年的自己做一下总结&lt;/p&gt;
&lt;h3 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h3&gt;&lt;p&gt;2019年最大的事，莫过于老后台的重构了，TypeSc
      
    
    </summary>
    
      <category term="个人随笔" scheme="https://l19861225q.github.io/blog/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="summary" scheme="https://l19861225q.github.io/blog/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>如何支持 Gitalk 评论功能</title>
    <link href="https://l19861225q.github.io/blog/2019/02/06/how-to-support-gitalk-comments/"/>
    <id>https://l19861225q.github.io/blog/2019/02/06/how-to-support-gitalk-comments/</id>
    <published>2019-02-06T05:15:00.000Z</published>
    <updated>2020-01-01T07:24:16.790Z</updated>
    
    <content type="html"><![CDATA[<p>之前博客的评论系统一直用的是 <a href="https://disqus.com/" target="_blank" rel="noopener">disqus</a>，但是需要翻墙，尤其是移动端访问的时候，根本就加载不了（除非开了 VPN）。国内的一些评论系统： duoshuo、uyan 也都挂了，仅存的一些不知道哪天说不准也关了。既然是技术博客，用 <a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a> 自然是最相符的。基于 GitHub issue 和 Preact 实现：首先，有大厂保证稳定性；其次，是喜欢 Gitalk 点击评论页面的动效，最后，使用 GitHub ID 登录，可以拜访各位大佬的主页😊</p><a id="more"></a><h3 id="申请-GitHub-Application"><a href="#申请-GitHub-Application" class="headerlink" title="申请 GitHub Application"></a>申请 GitHub Application</h3><blockquote><p>因为通过 GitHub 应用鉴权，所以需要 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">申请开通</a> 一个 application</p></blockquote><img src="/blog/2019/02/06/how-to-support-gitalk-comments/github-application-new.png"><ul><li><code>Application name</code> 应用名称，如：xxx 的博客</li><li><code>Homepage URL</code> 博客的地址</li><li><code>Application description</code> 描述，可不填</li><li><code>Authorization callback URL</code> <strong>重要！用来接收鉴权回调的 token，一般和博客的地址保持一致就好</strong></li></ul><h4 id="注册完成之后，会得到-Client-ID-和-Client-Secret，等会儿用到。"><a href="#注册完成之后，会得到-Client-ID-和-Client-Secret，等会儿用到。" class="headerlink" title="注册完成之后，会得到 Client ID 和 Client Secret，等会儿用到。"></a>注册完成之后，会得到 Client ID 和 Client Secret，等会儿用到。</h4><img src="/blog/2019/02/06/how-to-support-gitalk-comments/github-oauth.png"><h3 id="初始化-Gitalk"><a href="#初始化-Gitalk" class="headerlink" title="初始化 Gitalk"></a>初始化 Gitalk</h3><blockquote><p>我的博客模板语言用的 <a href="http://jade-lang.com/" target="_blank" rel="noopener">Jade</a>，在适当的地方引入 CSS 和 JS</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// xxx.jade</span><br><span class="line">link(rel=&quot;stylesheet&quot;, href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;)</span><br><span class="line">script(src=&apos;https://unpkg.com/gitalk/dist/gitalk.min.js&apos;)</span><br><span class="line">script.</span><br><span class="line">    (function() &#123;</span><br><span class="line">      var gitalk = new Gitalk(&#123;</span><br><span class="line">        clientID: &apos;#&#123;theme.gitalk.clientId&#125;&apos;,</span><br><span class="line">        clientSecret: &apos;#&#123;theme.gitalk.clientSecret&#125;&apos;,</span><br><span class="line">        repo: &apos;#&#123;theme.gitalk.repo&#125;&apos;,</span><br><span class="line">        owner: &apos;#&#123;theme.gitalk.owner&#125;&apos;,</span><br><span class="line">        admin: [&apos;#&#123;theme.gitalk.admin&#125;&apos;],</span><br><span class="line">        labels: [&apos;#&#123;theme.gitalk.labels&#125;&apos;],</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      gitalk.render(&apos;xxx&apos;)</span><br><span class="line">    &#125;)();</span><br></pre></td></tr></table></figure><ul><li><code>clientID</code>, <code>clientSecret</code> 填写上一步申请得到的</li><li><code>repo</code> 对应到一个 GitHub repo，建议单独创建一个项目，例如：gitalk</li><li><code>owner</code> Repo 拥有者的用户名，也可以是组织</li><li><code>admin</code> Repo 拥有者或协作者，和 <code>owner</code> 填一样即可</li><li><code>labels</code> 对应 Repo issue 的 labels，默认是 [‘Gitalk’]</li></ul><p><em>更多 Gitalk 的详细配置，可参考 <a href="https://github.com/gitalk/gitalk#options" target="_blank" rel="noopener">官方文档</a></em></p><blockquote><p><code>gitalk.render(&#39;xxx&#39;)</code> 将挂载到 id=”xxx” 的 DOM 上</p></blockquote><p>hexo 相关的配置示例：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#_config.yml</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line"><span class="attr">  clientId:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">  clientSecret:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">gitalk</span></span><br><span class="line"><span class="attr">  owner:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">  admin:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">  labels:</span> <span class="string">gitalk</span></span><br></pre></td></tr></table></figure></p><h3 id="Gitalk-ID-的问题"><a href="#Gitalk-ID-的问题" class="headerlink" title="Gitalk ID 的问题"></a>Gitalk ID 的问题</h3><p>该选项默认值是 <code>location.href</code>，用来指定页面的唯一 id，但是有长度限制，不能超过 50。显然，博客地址很容易超过这个长度。这里的解决办法是引入一个 <a href="https://www.npmjs.com/package/blueimp-md5" target="_blank" rel="noopener">md5</a> 库，对 href 加密处理。另外，<code>location.href</code> 可能会被分享平台改写（微信分享时会附带一堆 querystring），改用 <code>location.pathname</code> 最稳妥。</p><p>更新模版配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// xxx.jade</span><br><span class="line">script(src=&apos;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&apos;)</span><br><span class="line">...</span><br><span class="line">script.</span><br><span class="line">    (function() &#123;</span><br><span class="line">      var gitalk = new Gitalk(&#123;</span><br><span class="line">        clientID: &apos;#&#123;theme.gitalk.clientId&#125;&apos;,</span><br><span class="line">        clientSecret: &apos;#&#123;theme.gitalk.clientSecret&#125;&apos;,</span><br><span class="line">        id: md5(#theme.gitalk.id)</span><br><span class="line">        ...</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>更新项目配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">  id:</span> <span class="string">location.pathname</span></span><br></pre></td></tr></table></figure><h3 id="记得关联-issue"><a href="#记得关联-issue" class="headerlink" title="记得关联 issue"></a>记得关联 issue</h3><p>经过上述的操作，已经接入了 Gitalk 来当作评论系统使用。</p><img src="/blog/2019/02/06/how-to-support-gitalk-comments/issue-init.png"><p>文章评论对应 repo 里的某条 issue，需要初始化进行关联。当然，如果这篇文章你不希望支持评论，就不用关联了。<br>最终评论的样子</p><img src="/blog/2019/02/06/how-to-support-gitalk-comments/comments-demo.png"><p>完结，撒花 🎉</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前博客的评论系统一直用的是 &lt;a href=&quot;https://disqus.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;disqus&lt;/a&gt;，但是需要翻墙，尤其是移动端访问的时候，根本就加载不了（除非开了 VPN）。国内的一些评论系统： duoshuo、uyan 也都挂了，仅存的一些不知道哪天说不准也关了。既然是技术博客，用 &lt;a href=&quot;https://gitalk.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gitalk&lt;/a&gt; 自然是最相符的。基于 GitHub issue 和 Preact 实现：首先，有大厂保证稳定性；其次，是喜欢 Gitalk 点击评论页面的动效，最后，使用 GitHub ID 登录，可以拜访各位大佬的主页😊&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://l19861225q.github.io/blog/categories/git/"/>
    
    
      <category term="gitalk" scheme="https://l19861225q.github.io/blog/tags/gitalk/"/>
    
      <category term="comments" scheme="https://l19861225q.github.io/blog/tags/comments/"/>
    
  </entry>
  
  <entry>
    <title>如何配置 GitLab CI</title>
    <link href="https://l19861225q.github.io/blog/2019/02/02/how-to-config-gitlab-ci/"/>
    <id>https://l19861225q.github.io/blog/2019/02/02/how-to-config-gitlab-ci/</id>
    <published>2019-02-02T06:06:00.000Z</published>
    <updated>2020-01-01T07:24:16.790Z</updated>
    
    <content type="html"><![CDATA[<p>最近在折腾 GitLab CI，想把之前用 Jenkins 执行的 Pipeline 迁移过来（Jenkins 界面实在是。。。），期间遇到一些问题，加上官方文档是纯英文，查询解决的时候花了一些功夫，最后总算满足了项目的持续集成需求。</p><a id="more"></a><h3 id="GitLab-CI-的配置文件"><a href="#GitLab-CI-的配置文件" class="headerlink" title="GitLab CI 的配置文件"></a>GitLab CI 的配置文件</h3><blockquote><p>新建一个 <code>.gitlab-ci.yml</code> 文件并进行相应的配置，即可触发 CI 的执行</p></blockquote><h3 id="如何配置"><a href="#如何配置" class="headerlink" title="如何配置"></a>如何配置</h3><h4 id="Stages"><a href="#Stages" class="headerlink" title="Stages"></a>Stages</h4><blockquote><p>定义 CI Pipeline 中需要的每个阶段</p></blockquote><p>我这里总共用到了四个阶段：</p><ul><li><code>setup</code> 初始化、安装依赖</li><li><code>test</code> 执行测试</li><li><code>build</code> 生产构建</li><li><code>publish</code> 发布（公司自建的 NPM）</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">setup</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">publish</span></span><br></pre></td></tr></table></figure><h4 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h4><blockquote><p>设置对 <code>node_modules/</code> 目录的缓存来提速后续 job 的执行。每个 job 执行时，会重置 <em>.gitignore</em> 中的文件或目录，设置缓存可避免再次安装。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="comment"># 在各个 job 之间共享该缓存</span></span><br><span class="line"><span class="attr">  key:</span> <span class="string">"$CI_PIPELINE_ID"</span></span><br><span class="line">  <span class="comment"># 缓存即使被 .gitignore 的文件或目录</span></span><br><span class="line"><span class="attr">  untracked:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_modules/</span></span><br></pre></td></tr></table></figure><h4 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h4><blockquote><p>主要是做一些初始化的工作，项目语言是 NodeJS，所以要用 npm 安装 <code>node_modules/</code></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">setup:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">setup</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line">    <span class="comment"># npm-prune 用来移除无关的 packages</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">prune</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><ul><li><code>stage</code> 声明该 job 对应到 stages 中的哪个阶段，名称必须保持一致</li><li><code>script</code> 执行的脚本，多个命令按顺序依次执行</li><li><code>only</code> 仅在当前分支下触发 job 执行</li></ul><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><blockquote><p>执行测试用例</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">test</span></span><br><span class="line">  <span class="comment"># Extract jest coverage result</span></span><br><span class="line"><span class="attr">  coverage:</span> <span class="string">/All</span> <span class="string">files\s*\|\s*([\d\.]+)/</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p><code>coverage</code><br>用于跟踪查找匹配测试覆盖率输出的正则表达式，项目中测试框架用的 <a href="https://jestjs.io/" target="_blank" rel="noopener">Jest</a>，输出的测试覆盖率表格如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--------------|----------|----------|----------|----------|-------------------|</span><br><span class="line">File          |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line <span class="comment">#s |</span></span><br><span class="line">--------------|----------|----------|----------|----------|-------------------|</span><br><span class="line">All files     |      100 |      100 |      100 |      100 |                   |</span><br><span class="line"> constants.ts |      100 |      100 |      100 |      100 |                   |</span><br><span class="line"> index.ts     |      100 |      100 |      100 |      100 |                   |</span><br><span class="line">--------------|----------|----------|----------|----------|-------------------|</span><br></pre></td></tr></table></figure></p><p>所以要保证是 100% 的覆盖率才能继续 pipeline 到下个阶段。</p><h4 id="build"><a href="#build" class="headerlink" title="build"></a>build</h4><blockquote><p>编译构建生产代码</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line"><span class="attr">    expire_in:</span> <span class="number">1</span> <span class="string">min</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">dist/*</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p><code>artifacts</code><br>因为后续的 job 依赖本次构建生成的临时文件（或目录），所以通过设置该项，可在该 job 执行成功后，将文件或目录保留至下个阶段，<em>expire_in</em> 可设置过期时间。</p><h4 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h4><blockquote><p>发布至 npm</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">publish:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">publish</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">bnpm</span> <span class="string">publish</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p><code>bnpm</code> 是公司自建的 npm 仓库</p><h3 id="环境变量别名的问题"><a href="#环境变量别名的问题" class="headerlink" title="环境变量别名的问题"></a>环境变量别名的问题</h3><p>执行 <code>publish</code> job 时，报错说找不到命令 <code>bnpm not found</code>，但是明明在机器上安装了。bnpm 是基于 cnpm 搭建的，使用方式采用的 <code>bash alias</code> 的形式，在环境变量里进行设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bashrc 或 .zshrc</span></span><br><span class="line"><span class="built_in">alias</span> bnpm=<span class="string">"cnpm --registry=http://xxx \</span></span><br><span class="line"><span class="string">--disturl=http://xxx \</span></span><br><span class="line"><span class="string">--registryweb=http://xxx \</span></span><br><span class="line"><span class="string">--cache=<span class="variable">$HOME</span>/.bnpm/.cache \</span></span><br><span class="line"><span class="string">--userconfig=<span class="variable">$HOME</span>/.bnpmrc"</span></span><br></pre></td></tr></table></figure><p>但是 non-interactive 模式下不支持 bash alias，执行 <code>man bash</code> 其中有段说明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Aliases are not expanded when the shell is not interactive, </span><br><span class="line">unless the expand_aliases shell option is <span class="built_in">set</span> using <span class="built_in">shopt</span> </span><br><span class="line">(see the description of <span class="built_in">shopt</span> under SHELL BUILTIN COMMANDS below).</span><br></pre></td></tr></table></figure></p><h4 id="before-script"><a href="#before-script" class="headerlink" title="before_script"></a>before_script</h4><blockquote><p>在 job 执行前，通过 <code>shopt</code> 来扩展别名从而支持 bnpm 命令</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">shopt</span> <span class="bullet">-s</span> <span class="string">expand_aliases</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">alias</span> <span class="string">bnpm='cnpm</span></span><br><span class="line"><span class="bullet">      -</span><span class="bullet">-registry=http://xxx</span></span><br><span class="line"><span class="bullet">      -</span><span class="bullet">-disturl=http://xxx</span></span><br><span class="line"><span class="bullet">      -</span><span class="bullet">-registryweb=http://xxx</span></span><br><span class="line"><span class="bullet">      -</span><span class="bullet">-cache=$HOME/.bnpm/.cache</span></span><br><span class="line"><span class="bullet">      -</span><span class="bullet">-userconfig=$HOME/.bnpmrc'</span></span><br></pre></td></tr></table></figure><p>至此，一个完整的 Pipeline 就顺利执行了。<br><img src="/blog/2019/02/02/how-to-config-gitlab-ci/pipeline.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在折腾 GitLab CI，想把之前用 Jenkins 执行的 Pipeline 迁移过来（Jenkins 界面实在是。。。），期间遇到一些问题，加上官方文档是纯英文，查询解决的时候花了一些功夫，最后总算满足了项目的持续集成需求。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://l19861225q.github.io/blog/categories/git/"/>
    
    
      <category term="gitlab" scheme="https://l19861225q.github.io/blog/tags/gitlab/"/>
    
      <category term="ci" scheme="https://l19861225q.github.io/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>如何在 OSX 上运行 GitLab Runner</title>
    <link href="https://l19861225q.github.io/blog/2019/01/23/how-to-run-gitlab-runner-on-osx/"/>
    <id>https://l19861225q.github.io/blog/2019/01/23/how-to-run-gitlab-runner-on-osx/</id>
    <published>2019-01-23T02:21:35.000Z</published>
    <updated>2020-01-01T07:24:16.789Z</updated>
    
    <content type="html"><![CDATA[<p>搭建 GitLab Pages 时用到了 GitLab CI/CD 持续集成，需要一个 Runner 来执行任务。<br>尽管按照官方文档搭建，还是遇到了一些坑。。。</p><a id="more"></a><h2 id="安装-gitlab-ci-multi-runner"><a href="#安装-gitlab-ci-multi-runner" class="headerlink" title="安装 gitlab-ci-multi-runner"></a>安装 <a href="https://github.com/ayufan/gitlab-ci-multi-runner" target="_blank" rel="noopener">gitlab-ci-multi-runner</a></h2><p>如果安装<a href="https://github.com/ayufan/gitlab-ci-multi-runner/blob/master/docs/install/osx.md" target="_blank" rel="noopener">文档</a>进行安装，会默认安装最新版本的 runner，但现在的私建 GitLab 版本是 8.x，两者不匹配，要指定安装版本。</p><h3 id="安装-1-11-2-版本"><a href="#安装-1-11-2-版本" class="headerlink" title="安装 1.11.2 版本"></a>安装 1.11.2 版本</h3><p><a href="https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/v1.11.2/index.html" target="_blank" rel="noopener">GiLab Runnder Release for 1.11.2</a></p><p>从上面的网站里下载 <code>binaries/gitlab-ci-multi-runner-darwin-amd64</code> 到本地，然后执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp gitlab-ci-multi-runner-darwin-amd64  /usr/<span class="built_in">local</span>/bin/gitlab-ci-multi-runner</span><br><span class="line">$ chmod +x /usr/<span class="built_in">local</span>/bin/gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure></p><h3 id="注册一个-Runner"><a href="#注册一个-Runner" class="headerlink" title="注册一个 Runner"></a>注册一个 Runner</h3><p>执行 <code>gitlab-ci-multi-runner register</code> 然后根据提示输入即可完成注册<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner</span><br></pre></td></tr></table></figure></p><p>上述两个问题的答案，从项目的 runners 配置里找<br><img src="/blog/2019/01/23/how-to-run-gitlab-runner-on-osx/runners.png"><br><img src="/blog/2019/01/23/how-to-run-gitlab-runner-on-osx/url-token.png"></p><p>到了选择 executor 这步<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please enter the executor:</span><br></pre></td></tr></table></figure></p><p>因为是搭建静态网站服务器，选择 <code>shell</code> 即可，一切从简，其他选项还需要额外的配置。<br>注册以后，刷新刚才的页面，一个 runner 被关联了进来。<br><img src="/blog/2019/01/23/how-to-run-gitlab-runner-on-osx/active.png"></p><h3 id="将-Runner-安装到服务列表"><a href="#将-Runner-安装到服务列表" class="headerlink" title="将 Runner 安装到服务列表"></a>将 Runner 安装到服务列表</h3><p>执行 <code>gitlab-ci-multi-runner install</code></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>执行 <code>gitlab-ci-multi-runner start</code></p><p>至此，一个 GitLab runner 就运行起来了，更多用法可参考<a href="https://github.com/ayufan/gitlab-ci-multi-runner/blob/master/docs/commands/README.md" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建 GitLab Pages 时用到了 GitLab CI/CD 持续集成，需要一个 Runner 来执行任务。&lt;br&gt;尽管按照官方文档搭建，还是遇到了一些坑。。。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://l19861225q.github.io/blog/categories/git/"/>
    
    
      <category term="gitlab" scheme="https://l19861225q.github.io/blog/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>2018 年的总结</title>
    <link href="https://l19861225q.github.io/blog/2018/12/30/summary-of-2018/"/>
    <id>https://l19861225q.github.io/blog/2018/12/30/summary-of-2018/</id>
    <published>2018-12-30T06:00:00.000Z</published>
    <updated>2020-01-01T07:27:16.858Z</updated>
    
    <content type="html"><![CDATA[<p>时间过得很快，2018 年已经接近尾声了，圣诞节刚过完生日，已经32张（岁）了 —— 高领码农😳。</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>业务方向转到了后台，其实是接手前同事遗留的项目。现在应该算全栈开发了，从服务端 Node 到前端 React 全家桶，JS 走遍全天下。其间接触了 ES、QConf、Redis 等一系列新的技术，Babel 的出现，可以在开发时用上很多 ES6+ 的新特性，效率提升很多。Webpack 也不像刚开始，需要一堆繁琐的配置，从第4个版本开始，基本就是开箱即用，零配置。<br>下半年在同事的安利下，开始升级到 TS，可以在开发阶段规避一些问题，学习成本也不是很高，听说未来 TS 可能会代替 ES 的主导地位，走一步算一步吧。看了看 React@16 之后的那些新特性，感觉有点瑟瑟发抖，前端变化真是太快了，一个框架都是如此。还是努力吧，别到最后学不动了再后悔。</p><p>自己带的小团队发展还不错，每个人在完成业务的同时还能自学，不定期来个组内小分享，学习气氛还是蛮浓厚的。整个前端团队陆陆续续来了几个妹子，给本来就枯燥单调的技术团队注入了新鲜的活力。尤其是两位“魔法师”的加入，经常能把大家逗乐，魔性十足。工位也换到了一个新的区域，通透明亮，换一个心情。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>一直保持的健身，这一年有些偷懒，加上饮食上不怎么控制，肚子有点起来。报名了私教课，上了几回也就没坚持了，上了一天班再去撸铁，确实有点累。感觉应该换成有氧运动，先把体重控制住。今年这方面不能松懈，俗话说“一胖毁所有”，要时刻监督自己。</p><p>在老妈的带动下，家里养了很多绿植，净化空气的同时，也能养眼，算是一个养生的兴趣吧。想着养个什么宠物，之前陪伴了好几年的龙猫走了，有点伤心。可能会考虑短毛猫吧，省去了遛狗的麻烦，而且也比较干净。做饭的次数屈指可数，总是点外卖，其实对身体不太好，不知道用的什么油，希望来年多下厨，精进一下厨艺。</p><p>中秋的时候去了趟京都，空气和环境还是那么的好。京都给我的感觉是“过去的日本”，庭院、寺庙居多，生活节奏也很慢。奈良公园的小鹿很亲近人，感觉有治愈心灵的功效。后来去大阪环球影城玩了个飞天翼龙项目，悬挂式的过山车。起初不敢玩有点怕，被同事软磨硬泡上去了，全程几乎闭着眼吧，哈哈，胆子还是小。</p><h3 id="心愿"><a href="#心愿" class="headerlink" title="心愿"></a>心愿</h3><ul><li>工作上越来越好</li><li>团队规模扩大一倍</li><li>努力把身体锻炼好</li><li>多走走几个地方，看看世界</li></ul><p>希望 2019 继续成长，加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时间过得很快，2018 年已经接近尾声了，圣诞节刚过完生日，已经32张（岁）了 —— 高领码农😳。&lt;/p&gt;
&lt;h3 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h3&gt;&lt;p&gt;业务方向转到了后台，其实
      
    
    </summary>
    
      <category term="个人随笔" scheme="https://l19861225q.github.io/blog/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="summary" scheme="https://l19861225q.github.io/blog/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>iOS 上，fixed 元素内的输入元素，获取焦点时的光标错位问题</title>
    <link href="https://l19861225q.github.io/blog/2017/12/15/ios-fixed-input-cursor-position/"/>
    <id>https://l19861225q.github.io/blog/2017/12/15/ios-fixed-input-cursor-position/</id>
    <published>2017-12-15T05:02:27.000Z</published>
    <updated>2020-01-01T07:24:16.781Z</updated>
    
    <content type="html"><![CDATA[<p>RT，如果一个输入元素（input, textarea …）的父容器设置了 <code>position: fixed</code>，当这个元素获取焦点时，会触发底部键盘的弹起。这时在输入框内打字的时候，会发现其光标错位了，一般会跑到下方。</p><center><br>  <img src="./demo.gif" width="200" alt="demo"><br></center><p>当你专注于一个输入时，浏览器会自动向下滚动，以便将焦点输入突出显示给用户，这就造成了页面内高度浮动，导致光标位移。</p><blockquote><p>遗憾的是，截至目前，iOS 11.x 上也有这个问题。</p></blockquote><h3 id="曾经尝试过的方案"><a href="#曾经尝试过的方案" class="headerlink" title="曾经尝试过的方案"></a>曾经尝试过的方案</h3><h4 id="当元素获取焦点时，改变父容器的定位方式：fixed-gt-absolute"><a href="#当元素获取焦点时，改变父容器的定位方式：fixed-gt-absolute" class="headerlink" title="当元素获取焦点时，改变父容器的定位方式：fixed &gt; absolute"></a>当元素获取焦点时，改变父容器的定位方式：<code>fixed</code> &gt; <code>absolute</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> evt <span class="keyword">of</span> [<span class="string">'focus'</span>, <span class="string">'blur'</span>]) &#123;</span><br><span class="line">  <span class="keyword">const</span> isFocus = evt === <span class="string">'focus'</span></span><br><span class="line">  <span class="keyword">const</span> fn = isFocus ? <span class="string">'add'</span> : <span class="string">'remove'</span></span><br><span class="line"></span><br><span class="line">  inputDOMNode.addEventListener(evt, () =&gt; &#123;</span><br><span class="line">    parentDOMNode.classList[fn](<span class="string">'input-focus'</span>)</span><br><span class="line">    htmlDOMNode.classList[fn](<span class="string">'no-scroll'</span>)</span><br><span class="line">    bodyDOMNode.classList[fn](<span class="string">'no-scroll'</span>)</span><br><span class="line"></span><br><span class="line">    isFocus &amp;&amp; setScrollTop(<span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.input-focus</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-scroll</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听了输入元素 <code>focus</code> 和 <code>blur</code> 事件，为父元素添加或移除某些样式。</p><blockquote><p>当 <code>position: absolute</code> 时，输入框的定位方式需要手动设置（这里采取了顶部对齐）；<code>.no-scroll</code> 是为了禁止 <code>body</code> 的滚动，保证输入框可见。</p></blockquote><p>但是这个方案在部分 Android 设备上，当键盘收起时并不会触发输入元素的 <code>blur</code> 事件，往往还需要用户主动点击页面的其他区域，算是一点小遗憾吧。</p><h3 id="终极解决方案（推荐）"><a href="#终极解决方案（推荐）" class="headerlink" title="终极解决方案（推荐）"></a>终极解决方案（推荐）</h3><h4 id="直接给-html-body-元素设置样式"><a href="#直接给-html-body-元素设置样式" class="headerlink" title="直接给 html, body 元素设置样式"></a>直接给 <code>html</code>, <code>body</code> 元素设置样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-overflow-scroll</span>: touch <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/-webkit-overflow-scrolling" target="_blank" rel="noopener"><code>-webkit-overflow-scrolling</code></a> 控制元素在移动设备上是否使用滚动回弹效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-overflow-scrolling</span>: <span class="selector-tag">touch</span>; <span class="comment">/* 当手指从触摸屏上移开，会保持一段时间的滚动 */</span></span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">auto</span>; <span class="comment">/* 由浏览器定夺，如果内容被修剪，就会显示滚动条 */</span></span><br></pre></td></tr></table></figure><p>当输入元素获取焦点时，键盘弹起，输入元素被顶到了键盘的上方，此时用户的手指会从触摸屏上移开，输入元素会保持一段时间的滚动，从而光标的位置可以被正确计算。</p><blockquote><p><code>!important</code> 在这里是为了防止这些属性会因为浏览器优先级过高而发生变化。<br>有点小遗憾的是，<code>!important</code> 侵入性有些高。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RT，如果一个输入元素（input, textarea …）的父容器设置了 &lt;code&gt;position: fixed&lt;/code&gt;，当这个元素获取焦点时，会触发底部键盘的弹起。这时在输入框内打字的时候，会发现其光标错位了，一般会跑到下方。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="前端技术" scheme="https://l19861225q.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="html" scheme="https://l19861225q.github.io/blog/tags/html/"/>
    
      <category term="js" scheme="https://l19861225q.github.io/blog/tags/js/"/>
    
      <category term="iOS" scheme="https://l19861225q.github.io/blog/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>DOM 单触点旋转的探索</title>
    <link href="https://l19861225q.github.io/blog/2017/12/13/touch-rotate-with-one-finger/"/>
    <id>https://l19861225q.github.io/blog/2017/12/13/touch-rotate-with-one-finger/</id>
    <published>2017-12-13T02:24:46.000Z</published>
    <updated>2020-01-01T07:24:16.780Z</updated>
    
    <content type="html"><![CDATA[<p>由于 <code>hammerjs</code> 的 rotate 行为不支持单触点，所以只能另辟蹊径。搜索后发现了一个比较好用的 Library</p><blockquote><p><a href="https://github.com/PixelsCommander/Propeller" target="_blank" rel="noopener">Propeller</a> - JavaScript library to rotate elements with mouse or touch gestures.</p></blockquote><p>读了下源码，其实现原理是监听一些事件，然后通过各种数学函数（sin, tan…），根据位移差值计算旋转角度，最后再更新 DOM 的 CSS（transform: rotate）达到旋转的效果。根据浏览器的兼容性，渐进使用了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">RAF</a><br>提升动画的帧数使其平滑展现。</p><h3 id="旋转方向的问题"><a href="#旋转方向的问题" class="headerlink" title="旋转方向的问题"></a>旋转方向的问题</h3><p>实际需求是要限制 DOM 的旋转方向，只可以顺时针旋转。官方尚未支持这个配置，但有提供部分事件钩子：<br><code>onRotate</code>, <code>onDragStart</code> …</p><p>期初，是想在 <code>onDragStart</code> 中根据 this.angle 判断是顺/逆时针旋转。发现这个事件是拖拽开始时才触发一次，此时并不能获取到 angle：即 this.angle = 0。又翻看了源码，只有在 <code>onRotate</code>时能获取到 angle（通过 RAF，每隔一段时间监听 evt.touches 的 X, Y 位移差值，通过数学公式计算旋转角度）。</p><p>源码中计算角度差并更新 DOM 的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  <span class="built_in">Math</span>.abs(<span class="keyword">this</span>.lastAppliedAngle - <span class="keyword">this</span>._angle) &gt;= <span class="keyword">this</span>.minimalAngleChange &amp;&amp;  <span class="keyword">this</span>.transiting === <span class="literal">false</span></span><br><span class="line">) &#123;</span><br><span class="line"> <span class="keyword">this</span>.updateCSS();</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">this</span>.lastAppliedAngle = <span class="keyword">this</span>._angle; <span class="comment">//  将本次的 angle 赋值给 lastAppliedAngle</span></span><br></pre></td></tr></table></figure></p><p>看来是取了绝对值，没有办法通过正负数来判断旋转的方向了。</p><h4 id="两个关键的变量"><a href="#两个关键的变量" class="headerlink" title="两个关键的变量"></a>两个关键的变量</h4><ul><li><code>this.angle</code> - 本次旋转的角度值</li><li><code>this.lastAppliedAngle</code> - 相邻最近旋转的一次的角度值（= this.angle），用来计算角度差值，默认是</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.angle = options.angle || defaults.angle</span><br><span class="line"><span class="keyword">this</span>.lastAppliedAngle = <span class="keyword">this</span>.virtualAngle = <span class="keyword">this</span>._angle = options.angle || defaults.angle;</span><br></pre></td></tr></table></figure><h4 id="逆时针旋转和复位"><a href="#逆时针旋转和复位" class="headerlink" title="逆时针旋转和复位"></a>逆时针旋转和复位</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onRotate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> angleDiff = <span class="keyword">this</span>.angle - <span class="keyword">this</span>.lastAppliedAngle;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (angleDiff &lt; <span class="number">0</span> &amp;&amp; angleDiff &gt; <span class="number">-350</span>) &#123;</span><br><span class="line">    <span class="comment">// 逆时针旋转，停止旋转，让 DOM 复位</span></span><br><span class="line">    <span class="keyword">this</span>.stop();</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果逆时针旋转，this.angle 取值 &lt; 0，而 this.lastAppliedAngle &gt; this.angle，所以 angleDiff &lt; 0， 通过 angleDiff &lt; 0 可以判断是否进行了逆时针旋转。</p><p>但是现在有个问题，当旋转了一圈再次回到0度时，DOM 不能再次旋转了</p><blockquote><p>这是因为，旋转一圈再次划过0度触发 onRotate 时，this.lastAppliedAngle = 350（测试几次发现，这个范围和触发 onRotate 的频率有关，大概在 350 ~ 359 度之间），而 this.angle 大概在 0 ~ 10 度之间。所以 angleDiff = 0 - (350 ~ 359) = -350 ~ -359 度之间，进入了逆时针判断的逻辑。这时还需加上临界点，所以有了 <code>angleDiff &gt; -350</code> 的边界。</p></blockquote><h4 id="重置-propeller"><a href="#重置-propeller" class="headerlink" title="重置 propeller"></a>重置 propeller</h4><blockquote><p>用来重置 DOM 为初始角度，这里直接使用了 this，所以调用时注意 Scope</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> propellerReset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._angle = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.updateCSS();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="完整的-onRotate"><a href="#完整的-onRotate" class="headerlink" title="完整的 onRotate"></a>完整的 onRotate</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">onRotate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> angleDiff =  <span class="keyword">this</span>.angle - <span class="keyword">this</span>.lastAppliedAngle;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 逆时针 &gt; 复位</span></span><br><span class="line">  <span class="keyword">if</span> (angleDiff &lt; <span class="number">0</span> &amp;&amp; angleDiff &gt; <span class="number">-355</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.rotateOrder = ANTI_CLOCKWISE;</span><br><span class="line">    <span class="keyword">this</span>.stop();</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      propellerReset.call(<span class="keyword">this</span>);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>rotateOrder 后续会用到。重置时注意设置一个超时（约 200 ms），保证 this.stop() 执行完再重置，否则动画会有跳帧抖动的现象。this.stop 会设置私有变量 this.active = false，当再次触发 this.update() 时会根据这个参数判断是否再次更新 DOM CSS。所以重置 propeller 的函数要手动调用一次 this.updateCSS()。</p><h4 id="旋转结束时的回调"><a href="#旋转结束时的回调" class="headerlink" title="旋转结束时的回调"></a>旋转结束时的回调</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">onDragStart: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.rotateOrder = CLOCKWISE;</span><br><span class="line">&#125;,</span><br><span class="line">onDragStop: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.angle &amp;&amp; <span class="keyword">this</span>.rotateOrder === CLOCKWISE) &#123;</span><br><span class="line">      alert(<span class="string">'stop'</span>);</span><br><span class="line">      propellerReset.call(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>), <span class="number">200</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个判断放在了 onDragStop 中，这里的超时是为了等待 onRotate 复位的超时，从而获得 DOM 最后真正的 angle。<code>rotateOrder === CLOCKWISE</code> 保证了只有顺时针才继续后面的逻辑。当旋转开始时，会触发一次 onDragStart 事件，此时设置 this.rotateOrder = CLOCKWISE（相当于重置 this.rotateOrder，默认视为是顺时针），当出现了逆时针旋转时，this.rotateOrder = ANTI_CLOCKWISE，此时触发的 onDragStop 中就能识别出旋转的方向了。</p><blockquote><p>Propeller 还支持更多的参数：</p><ul><li><code>step</code> 每次转动一个指定的角度</li><li><code>inertia</code> 惯性旋转</li><li><code>stepTransitionEasing</code> 旋转动画的过度函数</li></ul></blockquote><p>感兴趣的可以自行探索哈</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于 &lt;code&gt;hammerjs&lt;/code&gt; 的 rotate 行为不支持单触点，所以只能另辟蹊径。搜索后发现了一个比较好用的 Library&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PixelsCommander
      
    
    </summary>
    
      <category term="前端技术" scheme="https://l19861225q.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="js" scheme="https://l19861225q.github.io/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>解决 HammerJS 拖拽、缩放和旋转的手势问题</title>
    <link href="https://l19861225q.github.io/blog/2017/10/11/fix-hammerjs-conflict/"/>
    <id>https://l19861225q.github.io/blog/2017/10/11/fix-hammerjs-conflict/</id>
    <published>2017-10-11T10:35:14.000Z</published>
    <updated>2020-01-01T07:24:16.780Z</updated>
    
    <content type="html"><![CDATA[<p>近期基于 HammerJS 开发了一个贴纸的 React 高阶组件，<br>但是拖拽、缩放和旋转事件一起监听时会有手势问题。。。</p><a id="more"></a><p>开启了 hammerjs 的拖拽、缩放和旋转后，当两个手指触碰屏幕的瞬间，元素会立即旋转180度，但此时并未开始执行旋转，这是由于两个手指的位移差导致触发了旋转事件。另外拖拽和缩放、旋转事件也有冲突，执行缩放或旋转时会触发拖拽从而导致发生位移，元素会出现位置跳跃、抖动的问题。</p><p>所以决定自行实现这些事件的处理，每次旋转开始时，记录当前旋转的角度和缩放比率（因为设置了缩放和旋转可以同时触发）；旋转过程中实时计算旋转的差值来实现元素的旋转。旋转结束后再保存当前旋转的角度和缩放比率，一遍下次旋转开始时可以获取正确的值。通过 event.pointers.length 来区分拖拽还是缩放、旋转，从而避免手势的冲突。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">componentDidMount () &#123;</span><br><span class="line">  <span class="keyword">this</span>.DOMNode = findDOMNode(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mc = <span class="keyword">new</span> Hammer.Manager(element, &#123;</span><br><span class="line">    tap: &#123; <span class="attr">enable</span>: <span class="literal">false</span> &#125; <span class="comment">// 禁用 tap 事件</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拖拽、缩放和旋转，pointers 指定触发该事件的手指数，后面用来区分事件</span></span><br><span class="line">  <span class="keyword">const</span> pan = <span class="keyword">new</span> Hammer.Pan(&#123; <span class="attr">pointers</span>: <span class="number">1</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> pinch = <span class="keyword">new</span> Hammer.Pinch(&#123; <span class="attr">pointers</span>: <span class="number">2</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> rotate = <span class="keyword">new</span> Hammer.Rotate(&#123; <span class="attr">pointers</span>: <span class="number">2</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缩放和旋转可以同时进行</span></span><br><span class="line">  pinch.recognizeWith(rotate)</span><br><span class="line"></span><br><span class="line">  mc.add([pan, pinch, rotate])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一些公共的变量，缓存旋转角度、缩放比率、位移</span></span><br><span class="line">  <span class="keyword">let</span> startRotation = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> rotation = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> lastRotation</span><br><span class="line">  <span class="keyword">let</span> scale = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> lastScale = <span class="keyword">this</span>.DOMNode.clientWidth</span><br><span class="line">  <span class="keyword">let</span> lastPosX = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> lastPosY = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> posX = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> posY = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听如下的事件</span></span><br><span class="line">  mc.on(<span class="string">`</span></span><br><span class="line"><span class="string">    pinchstart pinch pinchend</span></span><br><span class="line"><span class="string">    rotatestart rotate rotateend</span></span><br><span class="line"><span class="string">    pan panend</span></span><br><span class="line"><span class="string">    tap, multitap</span></span><br><span class="line"><span class="string">  `</span>, (e) =&gt; &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (e.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'pinchstart'</span>:</span><br><span class="line">        lastScale = scale</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'pinch'</span>:</span><br><span class="line">        scale = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="built_in">Math</span>.min(lastScale * e.scale, <span class="number">10</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'pinchend'</span>:</span><br><span class="line">        lastScale = scale</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'rotatestart'</span>:</span><br><span class="line">        lastScale = scale</span><br><span class="line">        lastRotation = rotation</span><br><span class="line">        startRotation = e.rotation</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'rotate'</span>:</span><br><span class="line">        <span class="keyword">const</span> diff = startRotation - e.rotation</span><br><span class="line">        rotation = lastRotation - diff</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'rotateend'</span>:</span><br><span class="line">        lastScale = scale</span><br><span class="line">        lastRotation = rotation</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'pan'</span>:</span><br><span class="line">        posX = e.deltaX + lastPosX</span><br><span class="line">        posY = e.deltaY + lastPosY</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'panend'</span>:</span><br><span class="line">        lastPosX = posX</span><br><span class="line">        lastPosY = posY</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e.pointers.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="comment">// 当触屏的手指数量小于2个时，执行拖拽</span></span><br><span class="line">      <span class="comment">// translate3d(`$&#123;posX&#125;px, $&#123;posY&#125;px, 0`)</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 否则执行旋转或缩放</span></span><br><span class="line">      <span class="comment">// rotate(`$&#123;rotation&#125;deg`)</span></span><br><span class="line">      <span class="comment">// scale3d(`$&#123;scale&#125;, $&#123;scale&#125;, 1`)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新 element.style.transform 实现拖拽、缩放或旋转，注意浏览器兼容性</span></span><br><span class="line">    <span class="comment">// element.style['transform/-webkit-transform/-ms-transform/...'] = translate3d rotate scale3d</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期基于 HammerJS 开发了一个贴纸的 React 高阶组件，&lt;br&gt;但是拖拽、缩放和旋转事件一起监听时会有手势问题。。。&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="https://l19861225q.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hammerjs" scheme="https://l19861225q.github.io/blog/tags/hammerjs/"/>
    
      <category term="react" scheme="https://l19861225q.github.io/blog/tags/react/"/>
    
      <category term="hoc" scheme="https://l19861225q.github.io/blog/tags/hoc/"/>
    
  </entry>
  
  <entry>
    <title>交互式的 NPM Scripts</title>
    <link href="https://l19861225q.github.io/blog/2017/06/29/interactive-npm-scripts/"/>
    <id>https://l19861225q.github.io/blog/2017/06/29/interactive-npm-scripts/</id>
    <published>2017-06-29T07:51:16.000Z</published>
    <updated>2020-01-01T07:24:16.779Z</updated>
    
    <content type="html"><![CDATA[<p>尽管 Webpack 2 默认支持从终端传参数到配置文件中来实现定制：</p><blockquote><p>–env.x=xxx</p></blockquote><p>但每次开发都需要在命令行输入冗长且难记的各种参数:</p><blockquote><p>npm run dev – –env.p=xxx –env.s –env.r …</p></blockquote><p>希望可以屏蔽这些细节，提供一个交互式的终端用户界面。<br>先看一下最终效果：</p><img src="/blog/2017/06/29/interactive-npm-scripts/interactive.gif"><h2 id="支持会话的终端界面-Inquirer-js"><a href="#支持会话的终端界面-Inquirer-js" class="headerlink" title="支持会话的终端界面 - Inquirer.js"></a>支持会话的终端界面 - Inquirer.js</h2><blockquote><p><a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">Inquirer.js</a> 可以预设一组问题来收集用户答案，支持过滤、验证等特性。</p></blockquote><h3 id="定义问题"><a href="#定义问题" class="headerlink" title="定义问题"></a>定义问题</h3><p>这里我需要两个提问：</p><ul><li>将要开发哪个项目（必填）</li><li>可选配置（是否生成雪碧图、是否使用 CSS Module 等）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> questions = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'project'</span>,</span><br><span class="line">    message: <span class="string">'Please input the project name:'</span>,</span><br><span class="line">    <span class="comment">// 验证：这个答案必填才继续后面的问题</span></span><br><span class="line">    validate: <span class="function">(<span class="params">str</span>) =&gt;</span> <span class="built_in">Boolean</span>(str.length)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'conf'</span>,</span><br><span class="line">    type: <span class="string">'checkbox'</span>,</span><br><span class="line">    message: <span class="string">'Please make your choice:'</span>,</span><br><span class="line">    choices: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Sprite (是否生成雪碧图)'</span>, <span class="attr">value</span>: <span class="string">'s'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Retina (是否支持 Retina 雪碧图)'</span>, <span class="attr">value</span>: <span class="string">'r'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'CSS Module (是否使用 CSS Module)'</span>, <span class="attr">value</span>: <span class="string">'m'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Use React (是否使用 React, 默认 Preact)'</span>, <span class="attr">value</span>: <span class="string">'R'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="收集答案"><a href="#收集答案" class="headerlink" title="收集答案"></a>收集答案</h3><p><code>--color</code> 来让终端始终高亮显示强调的内容。Inquirer 支持 Promise 特性，代码看起来也十分的简介、优雅。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> args = [<span class="string">'--color'</span>]</span><br><span class="line">inquirer.prompt(questions).then(<span class="function"><span class="keyword">function</span> (<span class="params">&#123; project, conf &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拼接成 Webpack 2 规定的参数格式</span></span><br><span class="line">  args.push(<span class="string">`--env.p=<span class="subst">$&#123;project&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  conf.map(<span class="function">(<span class="params">command</span>) =&gt;</span> args.push(<span class="string">`--env.<span class="subst">$&#123;command&#125;</span>`</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="终端-Loading-动画-ora"><a href="#终端-Loading-动画-ora" class="headerlink" title="终端 Loading 动画 - ora"></a>终端 Loading 动画 - ora</h2><blockquote><p><a href="https://github.com/sindresorhus/ora" target="_blank" rel="noopener">ora</a> 优雅的终端 Loading 动画</p></blockquote><p>因为 webpack 的配置文件使用了 ES6，在启动前需要先经过 Babel 转码，需要一定的时间，这时如果能给终端 Loading 的反馈，用户体验将是美好的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'\n'</span>) <span class="comment">// 和上面 Inquirer 的问题保留一个空行更美观</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> oraInstance = ora(&#123;</span><br><span class="line">  color: <span class="string">'cyan'</span>,</span><br><span class="line">  text: <span class="string">'Please waiting for the webpack start'</span></span><br><span class="line">&#125;).start()</span><br></pre></td></tr></table></figure><p>这里返回了 ora 的实例，后面需要显示的调用 <a href="https://github.com/sindresorhus/ora#api" target="_blank" rel="noopener">ora 的 API</a> <code>stop</code> &amp; <code>clear</code> 来停止并移除 ora .</p><h2 id="用于-Node-js-的-shell-命令-shellJS"><a href="#用于-Node-js-的-shell-命令-shellJS" class="headerlink" title="用于 Node.js 的 shell 命令 - shellJS"></a>用于 Node.js 的 shell 命令 - shellJS</h2><blockquote><p><a href="https://github.com/shelljs/shelljs" target="_blank" rel="noopener">ShellJS</a> 是 Node.js API 之上的 shell 命令的便携式（Windows / Linux / OS X）实现。</p></blockquote><p>我需要在 js 文件里执行原先定义在 <code>package.json</code> 中的 <code>scripts</code> 命令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> child = shell.exec(<span class="string">`</span></span><br><span class="line"><span class="string">  NODE_ENV=development webpack --hide-modules <span class="subst">$&#123;args&#125;</span></span></span><br><span class="line"><span class="string">`</span>, &#123; <span class="attr">async</span>: <span class="literal">true</span> &#125;) <span class="comment">// 异步执行速度更快哦</span></span><br></pre></td></tr></table></figure><p>这里返回了子线程的实例 child，后面会用到他的 <code>stdout</code>、<code>stderr</code> 实现监听终端输出的功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm run dev</span></span><br><span class="line"><span class="comment">// Stop and clear the ora when webpack started</span></span><br><span class="line">child.stdout.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (data.toLowerCase().includes(<span class="string">'webpack'</span>)) &#123;</span><br><span class="line">    oraInstance.stop() <span class="comment">// 停止 ora 动画</span></span><br><span class="line">    oraInstance.clear() <span class="comment">// 移除 ora</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>因为 ora 的实现原理是不断刷新终端输出来达到动画的效果，如果不移除会造成 webpack stdout 的闪现，体验很差。</p><p>在 <code>NODE_ENV=production</code> 模式下，Webpack 只会产生标准错误输出 stderr，所以监听有些许改变：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm run build</span></span><br><span class="line">child.stderr.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (data.toLowerCase().includes(<span class="string">'compiling'</span>)) &#123;</span><br><span class="line">    oraInstance.stop()</span><br><span class="line">    oraInstance.clear()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>OK~ 愉快地 coding 吧 ^_^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;尽管 Webpack 2 默认支持从终端传参数到配置文件中来实现定制：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;–env.x=xxx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但每次开发都需要在命令行输入冗长且难记的各种参数:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm
      
    
    </summary>
    
      <category term="前端技术" scheme="https://l19861225q.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="node" scheme="https://l19861225q.github.io/blog/tags/node/"/>
    
      <category term="npm" scheme="https://l19861225q.github.io/blog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>前端项目架构时遇到的问题</title>
    <link href="https://l19861225q.github.io/blog/2017/06/23/framework-qa/"/>
    <id>https://l19861225q.github.io/blog/2017/06/23/framework-qa/</id>
    <published>2017-06-23T01:44:41.000Z</published>
    <updated>2020-01-01T07:24:16.779Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文涉及到的相关技术点不会讲解基础用法（请参考官方文档），只会针对开发中遇到的痛点展开讨论。</strong></p><h2 id="技术概览"><a href="#技术概览" class="headerlink" title="技术概览"></a>技术概览</h2><p>主要使用了以下技术栈，从环境、编译、开发，再到测试，较为全面的涵盖了目前前端开发中常用的一套流程，可作为脚手架使用。</p><a id="more"></a><ul><li><a href="https://yarnpkg.com" target="_blank" rel="noopener">Yarn</a> - <small>Node 包管理器</small></li><li><a href="http://es6.ruanyifeng.com" target="_blank" rel="noopener">ES6</a> - <small>ECMAScript6，下一代 JS 语法</small></li><li><a href="https://babeljs.io" target="_blank" rel="noopener">Babel</a> - <small>ES6 编译器</small></li><li><a href="https://webpack.js.org" target="_blank" rel="noopener">Webpack</a> - <small>前端开发构建工具</small></li><li>Lint 代码检查<ul><li><a href="http://eslint.org" target="_blank" rel="noopener">ESLint</a> - <small>JavaScript 代码检查</small></li><li><a href="https://github.com/sasstools/sass-lint" target="_blank" rel="noopener">SASS Lint</a> - <small>SASS 代码检查</small></li><li><a href="http://htmlhint.com" target="_blank" rel="noopener">HTML Lint</a> - <small>HTML 代码检查</small></li></ul></li><li>React 相关<ul><li><a href="https://facebook.github.io/react" target="_blank" rel="noopener">React</a> - <small>React 库</small></li><li><a href="https://github.com/facebook/react/tree/master/packages/react-dom" target="_blank" rel="noopener">React DOM</a> - <small>React 插件，封装了和 DOM 相关的操作</small></li><li><a href="https://reacttraining.com/react-router" target="_blank" rel="noopener">React Router DOM</a> - <small>前端路由</small></li></ul></li><li>Style 相关<ul><li><a href="http://sass-lang.com" target="_blank" rel="noopener">SASS</a> - <small>强大的 CSS 预处理器</small><ul><li><a href="https://github.com/franzheidl/bemify" target="_blank" rel="noopener">Bemify</a> - <small>帮助写出 <a href="http://getbem.com" target="_blank" rel="noopener">BEM</a> 风格的 SASS 混入</small></li><li><a href="http://bourbon.io" target="_blank" rel="noopener">Bourbon</a> - <small>轻量的 SASS 工具集</small></li><li><a href="http://postcss.org" target="_blank" rel="noopener">Post CSS</a> - <small>强大的 CSS 后处理器</small></li></ul></li></ul></li><li>Unit Testing <a href="http://baike.baidu.com/item/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95" target="_blank" rel="noopener">单元测试</a><ul><li><a href="https://karma-runner.github.io/1.0/index.html" target="_blank" rel="noopener">Karma</a> - <small>单元测试执行器</small></li><li><a href="https://jasmine.github.io" target="_blank" rel="noopener">Jasmine</a> - <small>行为驱动测试框架</small></li><li><a href="http://airbnb.io/enzyme" target="_blank" rel="noopener">Enzyme</a> - <small>React 单元测试套件</small></li><li><a href="http://phantomjs.org" target="_blank" rel="noopener">PhantomJS</a> - <small>基于 WebKit 的服务器端 JavaScript API，无需浏览器的 Web 测试</small></li></ul></li><li>E2E Testing <a href="https://zhidao.baidu.com/question/29346350.html" target="_blank" rel="noopener">端到端测试</a><ul><li><a href="http://nightwatchjs.org/" target="_blank">Nightwatch</a> - <small>基于 Node 的验收测试框架，使用 <a href="http://www.seleniumhq.org/" target="_blank">Selenium WebDriver API</a> 以将 Web 应用测试自动化</small></li></ul></li></ul><h2 id="一次配置，多处使用"><a href="#一次配置，多处使用" class="headerlink" title="一次配置，多处使用"></a>一次配置，多处使用</h2><p>项目结构如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/hd</span><br><span class="line"> - <span class="regexp">/components /</span><span class="regexp">/ 基于组件化思想，把活动页面通用的部分提出来作为公共组件，开发时可按需引入</span></span><br><span class="line"><span class="regexp"> - /</span>constants <span class="comment">// 定义全局使用的常量</span></span><br><span class="line"> - <span class="regexp">/coverage /</span><span class="regexp">/ 单元测试覆盖率报告</span></span><br><span class="line"><span class="regexp"> - /</span>libs <span class="comment">// 常用库函数（获取用户详情、handlebars helper 等）</span></span><br><span class="line"> - <span class="regexp">/public /</span><span class="regexp">/ Webpack 打包编译后文件存放目录</span></span><br><span class="line"><span class="regexp"> - /</span>routes <span class="comment">// Koa 路由</span></span><br><span class="line"> - <span class="regexp">/SCSS /</span><span class="regexp">/ 通用 SCSS 样式</span></span><br><span class="line"><span class="regexp"> - /</span>src <span class="comment">// 开发目录</span></span><br><span class="line"> - <span class="regexp">/test /</span><span class="regexp">/ 测试（unit、e2e）</span></span><br><span class="line"><span class="regexp"> - /u</span>tils <span class="comment">// 工具函数</span></span><br><span class="line"> - <span class="regexp">/views /</span><span class="regexp">/ Koa 模板</span></span><br><span class="line"><span class="regexp"> - /</span>webpack <span class="comment">// 拆分的 Webpack 任务（若全部写在 webpack.config.js 中，会导致文件臃肿、不便阅读）</span></span><br><span class="line"> - .babelrc <span class="comment">// Babel 配置</span></span><br><span class="line"> - .eslintrc <span class="comment">// ESLint 配置</span></span><br><span class="line"> - .gitignore <span class="comment">// Git 忽略定义</span></span><br><span class="line"> - CHANGELOG.md <span class="comment">// 更新日志</span></span><br><span class="line"> - karma.conf.js <span class="comment">// Karma 配置</span></span><br><span class="line"> - nightwatch.conf.js <span class="comment">// Nightwatch 配置</span></span><br><span class="line"> - package.json <span class="comment">// NPM Package JSON</span></span><br><span class="line"> - postcss.config.js <span class="comment">// Post CSS 配置</span></span><br><span class="line"> - README.md <span class="comment">// 说明文档</span></span><br><span class="line"> - webpack.config.babel.js <span class="comment">// Webpack 配置</span></span><br><span class="line"> - yarn.lock <span class="comment">// Yarn 锁（锁定 NPM 依赖包的版本）</span></span><br></pre></td></tr></table></figure><p>为了设计出一个通用的开发环境，满足不同的活动业务需求（可能来自运营、市场、公益等部门），需要做到彼此的项目隔离、互不影响。因此在 <code>/src</code> 目录下的第一子级是各个活动项目的源代码（命名采取：年份-{Project Name}，便于日后检索也可防止冲突）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/src</span><br><span class="line"> - <span class="regexp">/2017-lovers /</span><span class="regexp">/ 2017 情人节活动</span></span><br><span class="line"><span class="regexp"> - /</span><span class="number">2017</span>-trees <span class="comment">// 2017 植树节活动</span></span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p>因为使用了 webpack，开发时在终端输入指定的参数，定位到具体的某个活动项目，webpack 会根据当前的项目目录执行编译任务。为了适配这种通用性，会要求目录结构、文件名等要满足特定的规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 举个栗子</span></span><br><span class="line">/<span class="number">2017</span>-nightlive</span><br><span class="line"> - <span class="regexp">/components /</span><span class="regexp">/ 该项目用到的 React 组件</span></span><br><span class="line"><span class="regexp"> - /img</span> <span class="comment">// 图片文件</span></span><br><span class="line"> - <span class="regexp">/SCSS /</span><span class="regexp">/ 样式文件</span></span><br><span class="line"><span class="regexp"> - /</span>sprite <span class="comment">// 将要被生成雪碧图的图标文件</span></span><br><span class="line"> - index.hbs <span class="comment">// 项目模板</span></span><br><span class="line"> - index.js <span class="comment">// Webpack 编译时的 entry 文件</span></span><br></pre></td></tr></table></figure><h2 id="Babel-6-x"><a href="#Babel-6-x" class="headerlink" title="Babel (6.x)"></a>Babel (6.x)</h2><blockquote><p>可以将 ES6 语法转换成 ES5 语法，让我们在使用 ES6 新特性编写代码的同时，不需要考虑各大浏览器具体的兼容性情况。</p></blockquote><p>这里选择了 Babel，主要有以下几个原因：</p><ul><li>Babel 对 ES6 的支持程度比其它同类更高或相当</li><li>Babel 拥有完善的文档和较好体验的在线编译环境</li><li>Babel 使用广泛，用户基础好</li></ul><p>关于第一点原因的主要数据支持可以在 <a href="https://babeljs.io" target="_blank" rel="noopener">Bebel 官网</a>，我们可以看到不同版本 Babel 对 ES6 跟进和支持的情况，另外，关于在线编译平台，可以访问官网进行体验，这对于研究 Babel 编译结果十分方便。</p><p>关于 Babel 的接入和使用方法，社区上的资料很多，这里配合构建工具 webpack，只需要安装插件 <a href="https://github.com/babel/babel-loader" target="_blank">babel-loader</a> 并在 <a href="https://webpack.js.org/configuration/module" target="_blank">webpack.module.rules</a> 中进行相关配置即可使用。</p><h3 id=""><a href="#" class="headerlink" title=""></a><a href="https://babeljs.io/docs/usage/polyfill" target="_blank" rel="noopener">babel-polyfill</a></h3><blockquote><p>Babel 默认只转换新的 JavaScript 语法，而不转换新的 API。</p></blockquote><p>Babel 可以编译 <code>let</code>、<code>const</code> 等特性，但是诸如 Iterator、Generator、Reflect、Promise 等全局对象，或者数组实例的 find 这些新的方法并不会得到编译。如果想让这个方法运行，必须使用 babel-polyfill，<strong>同时要保证这个 polyfill 在你的所有其他脚本之前就要加载执行。因为编译产出为 ES5 代码，所以又要处在 ES5 垫片 <a href="https://github.com/es-shims/es5-shim" target="_blank" rel="noopener">es5-shim</a>、ES6 垫片 <a href="https://github.com/paulmillr/es6-shim" target="_blank" rel="noopener">es6-shim</a> 之后。</strong>（垫片就是在低级环境中使用高级语法时，手动实现高级功能，模拟高级环境）</p><p>实际情况中，在公共组件 <code>&lt;App /&gt;</code> 中开头引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Babel Polyfill</span></span><br><span class="line"><span class="comment">// Error: only one instance of babel-polyfill is allowed</span></span><br><span class="line"><span class="comment">// https://github.com/stylelint/stylelint/issues/1316</span></span><br><span class="line"><span class="keyword">if</span> (!global._babelPolyfill) &#123; <span class="comment">// 为了解决重复引入的问题</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'babel-polyfill'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目开发时将这个组件作为最外层容器使用即可。</p><h3 id="Babel-配置-Presets（转码规则）"><a href="#Babel-配置-Presets（转码规则）" class="headerlink" title="Babel 配置 - Presets（转码规则）"></a>Babel 配置 - Presets（转码规则）</h3><h4 id="-1"><a href="#-1" class="headerlink" title=""></a><a href="http://babeljs.io/docs/plugins/preset-env" target="_blank" rel="noopener">babel-preset-env</a></h4><p>随着浏览器和 Node.js 的版本迭代，对新语法的支持也越来越好。但非常尴尬的是，我们总是使用 Babel 把所有代码一股脑转换成 ES5。这意味着我们抛弃了性能优秀的 <code>let</code>、<code>const</code> 关键字，放弃了简短的代码，而选择了又长又丑像坨屎的经过变换后的代码。</p><p>即使仅仅将代码跑在对 ES5 支持度在 99% 的 Node 6 上，一旦使用了 <code>import</code> 关键字，你就得用 Babel 对代码进行转换，一般还是全部转换为 ES5，辣鸡 Node.js 竟然还不支持 <code>import</code> 和 <code>export。</code></p><blockquote><p>那么有没有什么工具能智能识别当前运行环境，并且进行适当的转换，以及填充适当的 polyfill 呢？</p></blockquote><p>还真有，而且是 Babel 官方提供的，一个名为 babel-preset-env 的插件。它不需要你自行添加任何 preset，比如我们最常用的 es2015，它能根据设置智能转换代码。</p><h4 id="-2"><a href="#-2" class="headerlink" title=""></a><a href="http://babeljs.io/docs/plugins/preset-react/" target="_blank" rel="noopener">babel-preset-react</a></h4><p>React 转码规则，支持编译 .jsx 文件。</p><h4 id="-3"><a href="#-3" class="headerlink" title=""></a><a href="https://babeljs.io/docs/plugins/preset-stage-0" target="_blank" rel="noopener">babel-preset-stage-0</a></h4><p>ES7 不同阶段语法提案的转码规则，涵盖了 <a href="https://babeljs.io/docs/plugins/preset-stage-1" target="_blank" rel="noopener">stage-1</a>、<a href="https://babeljs.io/docs/plugins/preset-stage-2" target="_blank" rel="noopener">stage-2</a>、<a href="https://babeljs.io/docs/plugins/preset-stage-3" target="_blank" rel="noopener">stage-3</a>。</p><h3 id="Babel-配置-Plugins（插件）"><a href="#Babel-配置-Plugins（插件）" class="headerlink" title="Babel 配置 - Plugins（插件）"></a>Babel 配置 - Plugins（插件）</h3><h4 id="-4"><a href="#-4" class="headerlink" title=""></a><a href="https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types" target="_blank" rel="noopener">babel-plugin-transform-react-remove-prop-types</a></h4><p>在 webpack production 编译模式下移除 React propTypes 定义来减小编译后的 js 文件体积。</p><h4 id="-5"><a href="#-5" class="headerlink" title=""></a><a href="https://github.com/ant-design/babel-plugin-import" target="_blank" rel="noopener">babel-plugin-import</a></h4><p>实现 <a href="https://mobile.ant.design" target="_blank" rel="noopener">antd-mobile</a> 的按需加载，另外此插件配合 style 属性可以做到模块样式的按需自动加载。</p><h3 id="Babel-配置文件"><a href="#Babel-配置文件" class="headerlink" title="Babel 配置文件"></a>Babel 配置文件</h3><p>Babel 的配置文件是 <code>.babelrc</code>，存放在项目的根目录下，用来设置上述转码规则和插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"env"</span>,</span><br><span class="line">    <span class="string">"react"</span>,</span><br><span class="line">    <span class="string">"stage-0"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"env"</span>: &#123;</span><br><span class="line">    <span class="string">"production"</span>: &#123;</span><br><span class="line">      <span class="string">"plugins"</span>: [</span><br><span class="line">        [<span class="string">"transform-react-remove-prop-types"</span>, &#123;</span><br><span class="line">          <span class="string">"mode"</span>: <span class="string">"wrap"</span>,</span><br><span class="line">          <span class="string">"ignoreFilenames"</span>: [<span class="string">"node_modules"</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"import"</span>, &#123;</span><br><span class="line">      <span class="string">"style"</span>: <span class="string">"css"</span>,</span><br><span class="line">      <span class="string">"libraryName"</span>: <span class="string">"antd-mobile"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Babel-ESLint"><a href="#Babel-ESLint" class="headerlink" title="Babel ESLint"></a>Babel ESLint</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc</span></span><br><span class="line">parser: babel-eslint <span class="comment">// ESLint 解析器</span></span><br></pre></td></tr></table></figure><p>ESLint 允许自定义解析器。但是 ESLint 不支持 Babel 支持的一些语法节点。使用 <a href="https://github.com/babel/babel-eslint" target="_blank" rel="noopener">babel-eslint</a> 时，ESLint 将被修改，代码将转换为 ESLint 可以理解的代码。所有位置信息（如行号，列）也保留，以便轻松跟踪错误。</p><h2 id="Webpack-2-x"><a href="#Webpack-2-x" class="headerlink" title="Webpack (2.x)"></a>Webpack (2.x)</h2><h3 id="配置-amp-ES6"><a href="#配置-amp-ES6" class="headerlink" title="配置 &amp; ES6"></a>配置 &amp; ES6</h3><p>用 <code>webpack.config.babel.js</code> 命名 Webpack 的配置文件，会先经过 Babel 的转码，So 可以使用 ES6 语法咯。</p><h3 id="按需配置"><a href="#按需配置" class="headerlink" title="按需配置"></a>按需配置</h3><p>webpack 2.x 默认支持从命令行传参到配置文件实现按需配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Command line</span><br><span class="line">webpack -- --env.x=xxx</span><br></pre></td></tr></table></figure><h3 id="忽略解析"><a href="#忽略解析" class="headerlink" title="忽略解析"></a>忽略解析</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">noParse: vendor.map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`<span class="subst">$&#123;v&#125;</span>$`</span>))</span><br></pre></td></tr></table></figure><p>webpack.module.noParse 可防止 webpack 解析那些任何与给定正则表达式相匹配的文件，忽略大型的 library 可以提高构建性能。</p><h3 id="babel-loader-之-cacheDirectory"><a href="#babel-loader-之-cacheDirectory" class="headerlink" title="babel-loader 之 cacheDirectory"></a>babel-loader 之 cacheDirectory</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use: <span class="string">'babel-loader?cacheDirectory'</span></span><br></pre></td></tr></table></figure><p><code>cacheDirectory</code> 可以缓存处理过的模块，对于没有修改过的文件不会再重新编译，有着2倍以上的速度提升，这对于 rebuild 有着非常大的性能提升。</p><h3 id="动态匹配路径"><a href="#动态匹配路径" class="headerlink" title="动态匹配路径"></a>动态匹配路径</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">use: <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> loaders = [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'file-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        regExp: <span class="regexp">/components\/(.*)\//</span>,</span><br><span class="line">        name: <span class="string">`[1]/[name]-[hash:8].[ext]`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isProd) &#123;</span><br><span class="line">    loaders.push(imageWebpackLoaderRule)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> loaders</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>regExp 中匹配到的分组内容将会对应到下面的 [1] 处。</p><h3 id="Webpack-Hash-的困扰"><a href="#Webpack-Hash-的困扰" class="headerlink" title="Webpack Hash 的困扰"></a>Webpack Hash 的困扰</h3><p>由于 Webpack 的<a href="https://github.com/webpack/webpack/issues/1315" target="_blank" rel="noopener">一个问题</a>，<br>生成哈希值的方法并不是确定的。为了保证哈希值是根据文件内容生成的，<br>需要使用 <a href="https://github.com/erm0l0v/webpack-md5-hash" target="_blank" rel="noopener">webpack-md5-hash</a> 插件。</p><p>当更改了代码的任何一部分，即使剩下的文件内容没有被修改，入口也会被更新以放入新的清单。这样反过来也就导致新的哈希值，影响了长期缓存。为了修复这个问题，使用插件 <a href="https://github.com/soundcloud/chunk-manifest-webpack-plugin" target="_blank" rel="noopener">chunk-manifest-webpack-plugin</a> 来把清单导出到单独的 JSON 文件中。</p><blockquote><p>延伸阅读：<a href="https://sebastianblade.com/using-webpack-to-achieve-long-term-cache" target="_blank" rel="noopener">用 webpack 实现持久化缓存</a></p></blockquote><h3 id="Webpack-Clean-父级目录的权限问题"><a href="#Webpack-Clean-父级目录的权限问题" class="headerlink" title="Webpack Clean 父级目录的权限问题"></a>Webpack Clean 父级目录的权限问题</h3><p>在任务开始时，经常会使用插件 <a href="https://github.com/johnagan/clean-webpack-plugin" target="_blank" rel="noopener">clean-webpack-plugin</a> 来清除上次打包生成的文件，以保证目录的干净。但是，如果你想要清除父级目录，会遇到一个错误提示：</p><blockquote><p>xxx/xxx must be inside the project root…</p></blockquote><p>解决办法是设置 <code>root</code> 参数，指向 webpack 编译时的当前目录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> CleanPlugin(somePath, &#123;</span><br><span class="line">  root: process.cwd()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="提升-Webpack-压缩-JS-文件的速度"><a href="#提升-Webpack-压缩-JS-文件的速度" class="headerlink" title="提升 Webpack 压缩 JS 文件的速度"></a>提升 Webpack 压缩 JS 文件的速度</h3><p>Webpack 提供的 UglifyJS 插件由于采用单线程压缩，速度很慢。使用 <a href="https://github.com/gdborton/webpack-parallel-uglify-plugin" target="_blank" rel="noopener">webpack-parallel-uglify-plugin</a> 可以并行运行 UglifyJS 插件，可有效减少构建时间。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文涉及到的相关技术点不会讲解基础用法（请参考官方文档），只会针对开发中遇到的痛点展开讨论。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;技术概览&quot;&gt;&lt;a href=&quot;#技术概览&quot; class=&quot;headerlink&quot; title=&quot;技术概览&quot;&gt;&lt;/a&gt;技术概览&lt;/h2&gt;&lt;p&gt;主要使用了以下技术栈，从环境、编译、开发，再到测试，较为全面的涵盖了目前前端开发中常用的一套流程，可作为脚手架使用。&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="https://l19861225q.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="workflow" scheme="https://l19861225q.github.io/blog/tags/workflow/"/>
    
  </entry>
  
  <entry>
    <title>如何在 OSX 上运行 QConf</title>
    <link href="https://l19861225q.github.io/blog/2016/08/29/How-to-install-QConf-on-OSX/"/>
    <id>https://l19861225q.github.io/blog/2016/08/29/How-to-install-QConf-on-OSX/</id>
    <published>2016-08-29T02:59:57.000Z</published>
    <updated>2020-01-01T07:24:16.779Z</updated>
    
    <content type="html"><![CDATA[<p>最近，由于项目需要，需要在 Mac 上安装 <a href="https://github.com/Qihoo360/QConf" target="_blank">QConf</a>，其中的过程真是山路十八弯…</p><p>废话不多说，直接上菜！</p><a id="more"></a><h3 id="1-安装-QConf"><a href="#1-安装-QConf" class="headerlink" title="1.安装 QConf"></a>1.安装 QConf</h3><ul><li><code>git clone https://github.com/Qihoo360/QConf.git</code></li><li><code>cd QConf &amp;&amp; mkdir build &amp;&amp; cd build &amp;&amp; cmake ..</code><br><i>这里 <code>cmake ..</code> 第一次可能会报错，直接无视，再 <code>cmake ..</code> 一遍就可以了。</i></li><li><code>make</code></li><li><code>sudo make install</code><br><i>安装完成以后，默认应该是在 <code>/usr/local/qconf</code> 这个路径下面</i></li></ul><h3 id="2-问题处理"><a href="#2-问题处理" class="headerlink" title="2.问题处理"></a>2.<a href="https://github.com/Qihoo360/QConf/wiki/FAQ" target="_blank">问题处理</a></h3><h4 id="使用-qconf-需要调整共享内存限制"><a href="#使用-qconf-需要调整共享内存限制" class="headerlink" title="使用 qconf 需要调整共享内存限制"></a>使用 qconf 需要调整共享内存限制</h4><p><strong>通过 sysctl -a | grep shm 查看当前的共享内存上限的大小，如果不足2G，则进行如下操作：</strong></p><blockquote><p>修改共享内存上限，使当前正在运行的系统生效 <code>需要 sudo -s 下执行</code><br>Mac 执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl kern.sysv.shmmax=2048000000</span><br><span class="line">sysctl kern.sysv.shmall=1073741824</span><br></pre></td></tr></table></figure></p><p>修改共享内存上限，使机器重启时生效，需要在 /etc/sysctl.conf 添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kern.sysv.shmmax=2048000000</span><br><span class="line">kern.sysv.shmall=1073741824</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="3-安装-flock"><a href="#3-安装-flock" class="headerlink" title="3.安装 flock"></a>3.安装 flock</h3><blockquote><p><code>/usr/local/qconf/bin/agent-cmd.sh:355</code> 用到了 <code>flock</code> 命令，但 OSX 并不支持，需要手动安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap discoteq/discoteq</span><br><span class="line">brew install flock</span><br></pre></td></tr></table></figure><p>装好以后，修改（需要 sudo） <code>/usr/local/qconf/bin/agent-cmd.sh:355</code> 去掉 <code>-e</code> 参数，否则会报错。</p><h3 id="4-启动-QConf"><a href="#4-启动-QConf" class="headerlink" title="4.启动 QConf"></a>4.启动 QConf</h3><ul><li><code>cd /usr/local/qconf/bin &amp;&amp; sh agent-cmd.sh start</code></li></ul><h3 id="5-安装-QConf-的-Node-驱动-node-qconf"><a href="#5-安装-QConf-的-Node-驱动-node-qconf" class="headerlink" title="5.安装 QConf 的 Node 驱动 node-qconf"></a>5.安装 QConf 的 Node 驱动 <a href="https://www.npmjs.com/package/node-qconf" target="_blank">node-qconf</a></h3><p>当然也有 C++ PHP 等 <a href="https://github.com/Qihoo360/QConf/tree/master/driver" target="_blank">其他驱动</a> 咯</p><ul><li>设置环境变量 .bashrc/.zshrc/…<br><code>export QCONF_INSTALL=/usr/local/qconf</code></li><li><code>npm install node-qconf</code></li></ul><h3 id="6-愉快的玩耍吧"><a href="#6-愉快的玩耍吧" class="headerlink" title="6.愉快的玩耍吧"></a>6.愉快的玩耍吧</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qconf = <span class="built_in">require</span>(<span class="string">'node-qconf'</span>);</span><br><span class="line">  qconf.getAllHost();</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p><br></p><h2 id="A-Big-Hole-一个大坑！"><a href="#A-Big-Hole-一个大坑！" class="headerlink" title="A Big Hole (一个大坑！)"></a>A Big Hole (一个大坑！)</h2><h5 id="运行时，如果提示找不到-libqconf-dylib-这货怎么办？"><a href="#运行时，如果提示找不到-libqconf-dylib-这货怎么办？" class="headerlink" title="运行时，如果提示找不到 libqconf.dylib 这货怎么办？"></a>运行时，如果提示找不到 <code>libqconf.dylib</code> 这货怎么办？</h5><p>多半是因为 <code>libqconf.dylib</code> 这货的路径设置问题。<br>其实这货就在 <code>/usr/local/qconf/lib</code> 下，所以我也尝试过设置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DYLD_LIBRARY_PATH=<span class="variable">$DYLD_LIBRARY_PATH</span>:<span class="variable">$QCONF_INSTALL</span>/lib</span><br></pre></td></tr></table></figure><p>确实，这样设置以后在 Node 命令行模式下加载 <code>node-qconf</code> 已经可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node</span><br><span class="line">&gt; require(<span class="string">'node-qconf'</span>)</span><br><span class="line">&gt; // No error, so happy ~</span><br></pre></td></tr></table></figure><p>但是！如果用了类似 <a href="http://nodemon.io/" target="_blank">nodemon</a> 来启动项目，还是会提示找不到这货的诡异错误。原因呢…</p><p>Presumably, you are running El Capitan (OS X 10.11). It’s a side effect of System Integrity Protection. From the <a href="https://developer.apple.com/library/prerelease/mac/documentation/Security/Conceptual/System_Integrity_Protection_Guide/RuntimeProtections/RuntimeProtections.html" target="_blank">System Integrity Protection Guide: Runtime Protections<a> article:<br><br></a></a></p><blockquote><p>When a process is started, the kernel checks to see whether the main executable is protected on disk or is signed with an special system entitlement. If either is true, then a flag is set to denote that it is protected against modification. …<br><br><br><br>… Any dynamic linker (dyld) environment variables, such as DYLD_LIBRARY_PATH, are purged when launching protected processes.</p></blockquote><p><i>参考</i></p><ul><li><a href="http://stackoverflow.com/questions/35568122/why-isnt-dyld-library-path-being-propagated-here" target="_blank" rel="noopener">Why isn’t DYLD_LIBRARY_PATH being propagated here?</a></li></ul><p>额，好吧，我们设置的 DYLD_* 这些环境变量都在启动一个受保护的进程时被净化掉了！</p><p>后来仔细发现，报错的文件是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/node-qconf/build/Release/qconf.node</span><br></pre></td></tr></table></figure><p>这货还是个二进制文件！&gt;_&lt;<br>那么有什么办法可以查看它在启动时引用的 Shared library paths？</p><h5 id="otool"><a href="#otool" class="headerlink" title="otool"></a>otool</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./node_modules/node-qconf/build/Release/</span><br><span class="line">otool -L qconf.node</span><br><span class="line"></span><br><span class="line">// qconf.node:</span><br><span class="line">//   libqconf.dylib (compatibility version 0.0.0, current version 0.0.0)</span><br><span class="line">//   ...</span><br></pre></td></tr></table></figure><p>看来，的确是路径问题，它从当前目录引用了 <code>libqconf.dylib</code><br>好吧，那么有什么办法可以来修改这个路径？</p><h5 id="install-name-tool"><a href="#install-name-tool" class="headerlink" title="install_name_tool"></a>install_name_tool</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install_name_tool -change libqconf.dylib /usr/<span class="built_in">local</span>/qconf/lib/libqconf.dylib ./qconf.node</span><br></pre></td></tr></table></figure><p>这时再执行 <code>otool -L qconf.node</code> 会发现已经被设置成为正确的路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qconf.node:</span><br><span class="line">  /usr/<span class="built_in">local</span>/qconf/lib/libqconf.dylib (compatibility version 0.0.0, current version 0.0.0)</span><br></pre></td></tr></table></figure></p><p>大功告成！再也不会看到烦人的找不到 .dylib 的错误了。但这个方法只能算是一种 hack，如果重新安装了 <code>node-qconf</code>，还是需要重新 hack 的。</p><p><i>参考</i></p><ul><li><a href="http://www.jianshu.com/p/193ba07dadcf" target="_blank" rel="noopener">两个 Xcode 的实用工具： otool 和 install_name_tool</a></li><li><a href="http://superuser.com/questions/282450/where-do-i-set-dyld-library-path-on-mac-os-x-and-is-it-a-good-idea" target="_blank" rel="noopener">Where do I set DYLD_LIBRARY_PATH on Mac OS X, and is it a good idea?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，由于项目需要，需要在 Mac 上安装 &lt;a href=&quot;https://github.com/Qihoo360/QConf&quot; target=&quot;_blank&quot;&gt;QConf&lt;/a&gt;，其中的过程真是山路十八弯…&lt;/p&gt;
&lt;p&gt;废话不多说，直接上菜！&lt;/p&gt;
    
    </summary>
    
      <category term="OSX" scheme="https://l19861225q.github.io/blog/categories/OSX/"/>
    
    
      <category term="qconf" scheme="https://l19861225q.github.io/blog/tags/qconf/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 部署失败？</title>
    <link href="https://l19861225q.github.io/blog/2016/07/17/Hexo-deploy-fail/"/>
    <id>https://l19861225q.github.io/blog/2016/07/17/Hexo-deploy-fail/</id>
    <published>2016-07-17T03:33:16.000Z</published>
    <updated>2020-01-01T07:24:16.779Z</updated>
    
    <content type="html"><![CDATA[<p>今天在运行 <code>hexo deploy</code> 的时候总是提示失败。查了一些 <a href="https://github.com/hexojs/hexo/issues/1154" target="_blank" rel="noopener">相关资料</a>，发现是 <a id="more"></a><code>_config.yml</code> 配置文件里的 <code>deploy:</code> 冒号后面缺少一个空格，我用的 Atom IDE，文件保存的时候会自动 trim 掉这个空格！找个文本编辑器重新编辑一下就可以了。如果还是不行，建议重新安装 hexo-deployer-git 这个插件。</p><p>坑！坑！坑！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在运行 &lt;code&gt;hexo deploy&lt;/code&gt; 的时候总是提示失败。查了一些 &lt;a href=&quot;https://github.com/hexojs/hexo/issues/1154&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;相关资料&lt;/a&gt;，发现是
    
    </summary>
    
      <category term="Hexo" scheme="https://l19861225q.github.io/blog/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>美化你的 &lt;pre /&gt; 标签</title>
    <link href="https://l19861225q.github.io/blog/2016/07/17/Beautify-your-pre/"/>
    <id>https://l19861225q.github.io/blog/2016/07/17/Beautify-your-pre/</id>
    <published>2016-07-17T02:26:57.000Z</published>
    <updated>2020-01-01T07:24:16.778Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2016/07/17/Beautify-your-pre/pre.png"><p>今天看到一个比较漂亮的 <code>&lt;pre /&gt;</code> 样式，记录一下 ^_^</p><a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">pre</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.6</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dde4e6</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>:</span><br><span class="line">    inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#fff</span>,</span><br><span class="line">    <span class="number">1px</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#fff</span>,</span><br><span class="line">    <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="number">#dde4e6</span>,</span><br><span class="line">    <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#fff</span>, <span class="number">4px</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">#dde4e6</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(#EAEEEF .1em, transparent .1em);</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">-o-linear-gradient</span>(#EAEEEF .1em, transparent .1em);</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(#EAEEEF .1em, transparent .1em);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">1.6em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2016/07/17/Beautify-your-pre/pre.png&quot;&gt;
&lt;p&gt;今天看到一个比较漂亮的 &lt;code&gt;&amp;lt;pre /&amp;gt;&lt;/code&gt; 样式，记录一下 ^_^&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="https://l19861225q.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="html" scheme="https://l19861225q.github.io/blog/tags/html/"/>
    
      <category term="css" scheme="https://l19861225q.github.io/blog/tags/css/"/>
    
  </entry>
  
</feed>
